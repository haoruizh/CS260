#Write a MIPS program to implement the following single digit adder:
#keyboard input: X+Y=
#display output: X+Y=Z
#where X and Y are single digits (such as 2 and 7) and Z is the result (such as 9).
#Please use keyboard interrupt to read the keyboard input from the receiver data, compute the result Z and use polling (on the transmitter control
#and transmitter data) to send the output X+Y=Z to the display.

.data
	expressionBuffer: .space 24 #stores 6 integers (value)
	asciiZero: .byte '0' #asciiZero = '0'
.text
.globl main
main:
	la $s0, expressionBuffer #s0->expressionBuffer add
	lui $s1, 0xffff #s1 holds the addr of receiver and transmitter
	#Turn on the receiver ready bit
	#lw $t0, 0($s1) #t1 holds the content of receiver control
	#ori $t0, $s1, 0x0001 #turn on the receiver ready bit
	#sw $t0, 0($s1) #save t1 to receiver
	#turn on the receiver interrrupt enable bit
	lw $t0, 0($s1)
	ori $t0, $t0, 0x0002
	sw $t0, 0($s1)
	#Turn on the transmitter ready bit
	lw $t0, 8($s1) #t1 holds the content of transmitter control
	ori $t0, $s1, 0x0001 #turn on the transmitter ready bit
	sw $t0, 8($s1) #save t1 to transmitter control
	#Pointless Loop that loops forever alone
	Loop1:
		j Loop1 #keep looping
	li $v0, 10
	syscall
#Function pack for interrupt
functionForInterrupt:
	addi $sp, $sp, 4
	sw $ra, 0($sp)
	lw $a0, 4($s1) #a0 stores the content of receiver data
	lb $t2, asciiZero
	subu $s3, $a0, $t2 #ascii to value
	sw $s3, 0($s0) #write it to buffer
	addi $s0, $s0, 4 #increment buffer
	beq $a0, 61, resultEvaulateAndPrint #if a0 == '=', go to caculate the result and print it out
	lw $ra, 0($sp)
	addi $sp, $sp, -4
	jr $ra


#evaulate the result and dispaly it
resultEvaulateAndPrint:
	la $s0, expressionBuffer
	#Caculate the result
	lw $t3,0($s0) #t3 -> content of x
	lw $t4, 8($s0) #t4 -> content of y
	add $s2, $t3, $t4 #s2->z=x+y
	jal checkResultBiggerThanOrEqual10
	#print
	jal convertAndPrint
	jr $ra
	
	
#If result is bigger than 10
checkResultBiggerThanOrEqual10:
	blt $s2, 10, lessthan10 #if s2 < 10
	largerThan10Check:
		subi $t3, $s2, 10 #t3 = second digit
		li $t2, 1 #t2 = first digit = 1
		sw $t2, 16($s0)
		sw $t3, 20($s0)
		#print
		jal convertAndPrint
		jr $ra
	lessthan10:
		li $t2, 0
		sw $t2, 16($s0)
		sw $s2, 20($s0)
		jal convertAndPrint
		jr $ra
#Convert ascii to value and display it to the screen
convertAndPrint:
	li $t3, 6
	la $s0, expressionBuffer
	convertLoop_valueToAscii:
		lw $a0, 0($s0) #get element
		jal valueToAscii#convert to Ascii
		sw $v0, 0($s0) #save converted item to array
		addi $s0, $s0, 4 #s0+4
		subi $t3, $t3, 1#t3--
		bgt $t3, $zero, convertLoop_valueToAscii #if t6==0, exit loop
	#Polling on the transmitter control and write into the transmitter data so that the experssion (such as 5+7=12) is sent to the display.
	li $t3, 6
	la $s0, expressionBuffer
	Loop3:
		lw $t1, 0($s0) #t1->item of array
		Loop2:
			lw $t2, 8($s1) #t1 holds the content of transmitter control
			andi $t4, $t2, 0x0001 #t2 holds the transmitter control ready bit
			beq $t4, $zero, Loop2 #if transmitter control is not ready, keep looping
		sw $t1, 12($s1) #t1 writes the transmitter data
		subi $t3, $t3, 1
		addi $s0, $s0, 4#increment array
		bgt $t3, $zero, Loop3
	#End
	#li $v0, 10
	#syscall

#Number to character
	valueToAscii:
	lb $t4, asciiZero
	addu $v0, $a0, $t4 #value to Ascii
	jr $ra #jump back to $ra
	
	
	
	
	
	
	
#INTERRUPT
.ktext 0x80000180
	#Save registers
	sw $at, k_save_at
	#turn off status register's interrupt enable bit
	mfc0 $k0, $12
	ori $k0, $k0, 0x0000 #turn off the bit
	mtc0 $k0, $12
	#check cause registers's execode
	mfc0 $k1, $13
	srl $k1, $k1, 2
	bne $k1, 0x1f, retrive
	#chceck the interrupt is caused by the keyboard
	#mfc0 $k1, $13
	#beq $k1, 0x0000, retrive
	#Interrupt handler code
	la $k0, functionForInterrupt
	jalr $k0
	#clear the cause register
	mtc0 $0, $13
	#reset status register
	mtc0 $k0, $12
	ori $k0, $k0, 0x0001
	mtc0 $k0, $12
	#retrieve registers
	retrive:
	lw $at, k_save_at
	#return
	eret
.kdata
	k_save_at: .word 0
